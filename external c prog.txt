-------BINARY NUMBER SYSTEM:
0-0000
1-0001
2-0010
3-0011
4-0100
5-0101
6-0110
7-0111
8-0000 1000(for positive numbers place "0" in front(MSB))
9-0000 1001
10-0000 1010
LSB==1=>odd number
LSB==0=>even number
--Bitwise AND(&)
--Bitwise OR(|)
--Bitwise XOR(^)
--Bitwise  left  shift(<<)
--Bitwise right shift(>>)

35-00100011
96-  1100000
32-00100000


235 1
117 1
58 1
29 0
14 1
7 0
3 1
1 1

73 1
36 1
18 0
9 0
4 1
2 0
1 0
235--11010111
73--  00010011
|==   11010111

76 0
38 0
19 0
9 1
4 1
2 0
1 1

22 0
11 0
5 1
2 1
1 1
76-1011000
22-0011100  (bitwise or(|))
94-1011100


13-01101
17-10001
|==11101
^==11100


117 1
58 1
49 0
24 1
12 0
6 0
3 0
1 1
264 0
132 0
66 0
33 1
16 0
8 0
4 0
2 0
1 1


117-010001011
264-10001000

2)72
    36 0
18 0
9 0
4 1
2 0
1 0
1

2)93 1
46   0
23 1
11 1
5 1
2 0
1 1
(93)10=(1011101)2

116-0
58 0
29 1
14 0
7 1
3 1
1

1198 0
599 0
299 1
149 1
74 1
37 0
18 1
9 0
4 1
2 0
1 0



298 0
149 1
74 0
37 1
18 0
9 1
4 0
2 0
1 1

1298 0
649 1
324 0
162 0
81 1
40 0
20 0
10 0
5 1
2 0
1 1

5673 1
2836 0
1418 0
709 1
354 0
177 1
88 0
44 0
22 0
11 1
5 1
2 0
1 1

17-10001
25-11001
&=     10001
10010
01001
11011
37-100101
19-010011
^ --110110--52

7<<0=111<<0=111=7
7<<1=111<<1=1110=14
7<<2=111<<2=11100=28
i.e,N<<k=N*(2^k)

N>>k=|N/(2^k)|

modulus(n%x)==(n-(n/x)*x)

Highest time complexity---for modulus(%) operator
Least time complexity----for bitwise operators
even or odd----...if x&1==0-->even else odd

#include<stdio.h>
int main(){
 int var=56;
 if((var&1)==0) printf("even");  //braces should be kept if left then it goes wrong as == has more priority than &
 else printf("odd");
}

#include<stdio.h>
int main(){
 int a=5,aa=1,s=1;
 if((a>18 &&(aa=1 || s==1))==0) printf("allowed");  
 else printf("not");
}


//if garade is A car,else if gare B Bike,else grade is C RTC
#include <stdio.h>
int main()
{
    
    char grade='A';
    if(grade=='A')printf("car");
    else if(grade=='B')printf("Bike");
    else if(grade=='C')printf("RTC");
    return 0;
}

//greatest number
#include <stdio.h>

int main()
{
    int a=5,b=5,c=1;
    if(a>=b && a>=c)printf("%d",a);
    else if(b>=a && b>=c)printf("%d",b);
    else if(c>=a && c>=b)printf("%d",c);
    return 0;
}

WHAT MAKES A GOOD ALGORITHM??
correctness,efficiency,


#include <stdio.h>

int main()
{
    int a=5,b=5,c=1;
    if(a>=b && a>=c)printf("%d",a);//3 operators=3 checks
    else if(b>c)printf("%d",b);//switch-1 check,1 operator=1 check===2 checks
    else if(c>a)printf("%d",c);//switch-1 check
    return 0;                        //total=6 checks
}
//T(n)=6 checks   if n=100====600 checks,if n=1000==>6000 checks............................................

#include <stdio.h>
int main()
{
    int a=15,b=5;
    printf("%s",a>=b ? "A":"B");
    return 0;
}

////EFFICIENT METHOD
#include <stdio.h>
int main()
{
    int a=15,b=5,c=15;
    printf(a>=b ?((a>=c)?"a":"c"):(b>=c)?"b":"c");     //1 op,1 switch,1 op,1 switch=====total 4 checks
    return 0;                                                           //T(n)=4 checks if n=100====400 checks,if n=1000===40000 checks..........
}                                                                          //efficient than before


//GREATEST OF FOUR NUMBERS
#include <stdio.h>
int main()
{
    int a=15,b=5,c=15,d=10;
    printf("%s",(a>=b && a>=c && a>=d)? "a":((b>=c && b>=d)?"b":(c>=d)?"c":"d"));    //6 checks
    return 0;
}

        (or)(gausiian elimination)

#include <stdio.h>
int main()
{
    int a=15,b=5,c=150,d=10000;
    printf(a>=b? a>=c? a>=d?"a":"d":c>=d?"c":"d":b>=c?b>=d?"b":"d":c>=d?"c":"d");   //6 checks
    return 0;
}


#include <stdio.h>
int main()
{
    char g='C';
    printf(g=='A'?"car":g=='B'?"Bike":g=='C'?"RTC":"WALK");   ///6 checks
    return 0;
}

=========================================================================================
Switch case is better than ternary operator
To choose or pick output use switch case

#include <stdio.h>
int main()
{
    char g='C';
    switch(g){
        case 'A':printf("car");break;  //if g matches it jumps to particular case-------///2 checks(one condition check and other for jump)
        case 'B':printf("bike");break;
        case 'C':printf("RTC");break;
        default:printf("walk");break;
        
    }
    return 0;
}
================================================================================================
//if marks between 700 and 800,grade is A
b/w 600 and 699,B
b/w 400 and 599,C
b/w 0 and 399,F //

#include <stdio.h>
int main()
{
    int m=12;
    switch(m){                                           //dont forgot to mention spaces before and after dots----- (firstno ... lastno)
        case 700 ... 800 :printf("A");break;   //2 checks
        case 600 ... 699 :printf("B");break;
        case 400 ... 599 :printf("C");break;
        default:printf("F");
        
    }
    
}
===================================================================================================
...LOOPS

====WHILE
#include <stdio.h>
int main()
{
    int i=1;
    while(i<=10){
        printf("%d ",i);
        i+=1;
    }
    
}
====DO WHILE

#include <stdio.h>

int main()
{
    
    int a[5];
    printf("enter ele:");
    for(int i=0;i<5;i++){
        scanf("%d",&a[i]);
    }
    int j=0;
    printf("even:");
    while(j<5){
        if(a[j]%2==0){
            printf("%d ",a[j]);
        }
        j++;
        
    }
    printf("\nodd:");
    int k=0;
    do{
        if(a[k]%2!=0){
            printf("%d ",a[k]);
        }
        k++;
    }while(k<5);
    return 0;
}



====================================================================================
ARRAYS
adv::::::less memory,less time,random access
disadv::wastage of memory(To overcome this we initalize with arr[])
1D
2D

=================================================================================
STRINGS(strlen,strrev,strcat,strcmp,strcpy)
There is no STRING in C
It is not implemented in C
But using arrays we implement string
#include <stdio.h>

int main()
{
    
    char str[2];
    scanf("%[\n]s",&str);   //for space seperated string we use [\n] for taking  input until and unless new
                                     //line char is encountered
    printf("%s",str);
}


====gets and fgets are used for taking string input (puts)

======string functions
#include <stdio.h>
#include <string.h>

int main()
{
    
    char str[10],s2[10],s3[20];
    printf("enter str:");
    scanf("%s",&str);
    printf("%s",str);
    printf("\n%d",strlen(str));
    printf("\n%s",strrev(str));
    strcpy(s2,str);
    printf("\n%s",s2);
    if(strcmp(str,s2)){
    	printf("\nnot equal");
	}
	else{
		printf("\nequal");
	}
	strcat(str,s2);
	printf("\n%s",str);
    return 0;
}

=================================================================================
PRIME NUM(efficient)
#include <stdio.h>

int main()
{
   int n;
   printf("enter number");
   scanf("%d",&n);
   int c=0;
   for(int i=2;i<=sqrt(n);i++){
       if(n%i==0){
           c+=1;
           break;
	   }
    }
    if(c==0){
        printf("prime");
    }
    else{
        printf("not prime");
    }

    return 0;
}

========================================================================
==PRIME NUMBERS IN A RANGE
#include <stdio.h>
#include <math.h>

int main()
{
   int a,b;
   printf("give starting no:");
   scanf("%d",&a);
   printf("give ending no:");
   scanf("%d",&b);
   
   for(int j=a;j<b;j++){
       int c=0;
       for(int i=2;i<=sqrt(j);i++){
           if(j%i==0){
               c+=1;
               break;
	        }
        }
        if(c==0){
            printf("%d ",j);
        }
        
   }
    return 0;
}

==================================================================================
math.h
time.h
==========================================================================
FUNCTIONS
return type initalized while declaring function is finalized=====if any other type is made it only takes
initialized one

============prime factors of a number
#include <stdio.h>
#include <math.h>
int prime(int n);

int main()
{
    int n;
    scanf("%d",&n);
    for (int i=1;i<n;i++){
        if(n%i==0){
            if(prime(i)){
                printf("%d ",i);
            }
        }
    }
    return 0;
}
    int prime(int m){
        int c=0;
        for(int i=2;i<=sqrt(m);i++){
           if(m%i==0){
               c+=1;
               break;
	        }
        }
        
        if(c==0){
            return 1;
        }
        else{
            return 0;
        }
        
    }
   
   



